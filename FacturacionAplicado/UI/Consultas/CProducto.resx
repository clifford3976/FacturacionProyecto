<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="TexterrorProvider.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAMAQAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWlpaIlpaWptbW1viX19fRgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABeXl4mW1tboFtbW/tcXFzOW1tb8FpaWv9cXFyqVVVVAwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhYWCBbW1uRWlpa+FtbW9NcXFxeVVVVA1tbW8VbW1v/W1tb/1tb
        W+1cXFw6AAAAAAAAAAAAAAAAXV1dIVxcXJlbW1v7XFxc0VxcXF5bW1s7W1tbNQAAAABbW1vEW1tb/1tb
        W/9bW1v/Wlpa/ltbW6MAAAACW1tbrltbW/5bW1u+WVlZQlxcXEtbW1uzWlpahV5eXhMAAAAAW1tbxFtb
        W/9bW1v/W1tb/1tbW/9bW1v/W1tb8FtbW/9aWlpdAAAAAFxcXLJbW1t7YGBgEFtbW34AAAAAAAAAAFtb
        W8RbW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tbOwAAAABVVVU8XFxcPQAAAABbW1ufYmJiDQAA
        AABbW1vEW1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbWzsAAAAAWlpaT1paWmNZWVkuW1tb52Bg
        YBAAAAAAW1tbxFtbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1s7AAAAAFxcXKFbW1uPAAAAAF1d
        XTQAAAAAAAAAAFtbW8lbW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tbOwAAAABeXl4TYmJiDQAA
        AABiYmINW1tbZVtbW6BcXFycW1tb4VtbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbWzsAAAAAAAAAAFlZ
        WStaWlqFW1tbqFpaWlVVVVUDAAAAAFpaWjZcXFzFW1tb9ltbW/9bW1v/W1tb/1tbW/9aWlpHWlpaZltb
        W6haWlp3WVlZFwAAAABbW1sOWlpaZltbW8hbW1v+W1tbvltbW2hbW1uaW1tb+ltbW/9cXFz6W1tb8Ftb
        W5RgYGAYAAAAAFpaWjNbW1uRW1tb7FtbW/BcXFyZWlpaMAAAAABdXV00W1tbkVxcXOxbW1v7W1tbHFxc
        XIhbW1vjW1tb9VtbW9pbW1v9W1tbtlpaWlJmZmYFVVVVElpaWmZbW1vEW1tb/1tbW9VaWlp3XV1dFgAA
        AAAAAAAAAAAAAFlZWTxbW1ujW1tb91tbW+JbW1uKW1tbvFtbW/1aWlrZWlpafFpaWh8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFVVVRJbW1twW1tbylxcXJZZWVk5AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA/z8AAPwPAADxhwAAx4EAABmAAABvgAAAfYAAAH2AAABngAAAfwAAAHngAABviAAAHDgAAIHj
        AADwHwAA/n8AAA==
</value>
  </data>
  <data name="TexterrorProvider.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFVVVQlaWloRWlpaEVpaWhFaWloRWlpaEVpaWhFaWloRWlpaEVpaWhFaWloRWlpaEVpa
        WhFaWloRWlpaEVpaWhFaWloRWlpaEVpaWhFaWloRWlpaEVpaWhFaWloRWlpaEVpaWhFaWloRWlpaEVpa
        WhFaWloRWlpaEVpaWhFVVVUJW1tb6FtbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tb
        W/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tb
        W/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW+dbW1uRW1tb8VxcXD1aWlozWlpaM1paWjNaWlozWlpaM1pa
        WjNaWlozWlpaM1paWjNaWlozWlpaM1paWjNaWlozWlpaM1paWjNaWlozWlpaM1paWjNaWlozWlpaM1pa
        WjNaWlozWlpaM1paWjNaWlozWlpaM1xcXD1bW1vyWlpakFlZWRRbW1vuWlpafAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXFxcfVtbW+5ZWVkUAAAAAFxcXG9bW1vzXl5eGwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF5eXhtbW1v0WlpabgAAAAAAAAAAZmZmBVtb
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFpaWk9bW1v8WFhYMVhYWDFbW1v9XFxcTgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFxcXLVbW1vGW1tbx1tbW7QAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXFxcJ1tbW/pbW1v5XFxcJwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXFxcdVxc
        XHUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////8AAAAAP////L////3f///7z/5/8+/+f/fn///n9///7/P+
        f8/5/n+f/f5/v/z+fz/+/n9//n5+f/9+fv//Pnz//555///ee///z/P//+/3///n5///9+////vf///5
        n////b////w////+f/////////////////8=
</value>
  </data>
</root>